name: GitHub Pages Deploy with Post-Deploy Testing

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: "pages-deploy"
  cancel-in-progress: false

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend for GitHub Pages
        working-directory: ./frontend
        env:
          VITE_JSON_URL: ${{ vars.VITE_JSON_URL }}
        run: npm run build

      - name: Copy concept map JSON files to dist
        run: |
          cp src/main/resources/concept-map.json frontend/dist/concept-map.json
          cp src/main/resources/concept-map-preview.json frontend/dist/concept-map-preview.json

      - name: Add .nojekyll file
        run: touch frontend/dist/.nojekyll

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Store deployment info
        run: |
          echo "DEPLOYMENT_URL=${{ steps.deployment.outputs.page_url }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

  post-deploy-tests:
    name: Post-Deploy Verification
    runs-on: ubuntu-latest
    needs: deploy-pages
    if: always() && needs.deploy-pages.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Wait for Pages deployment to propagate
        run: |
          echo "Waiting for Pages deployment to be available..."
          deployment_url="${{ needs.deploy-pages.outputs.page_url || 'https://jdoner02.github.io/concept-map-d3js/' }}"
          for i in {1..30}; do
            if curl -f -s "$deployment_url" | grep -q "Interactive Concept Map"; then
              echo "Pages deployment is available"
              break
            fi
            echo "Waiting for deployment... ($i/30)"
            sleep 10
          done

      - name: Run smoke tests against live Pages
        working-directory: ./frontend
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-pages.outputs.page_url || 'https://jdoner02.github.io/concept-map-d3js/' }}
        run: |
          # Run a subset of critical tests against the live site
          npx playwright test --grep "loads concept map and renders nodes" --project=chromium
          npx playwright test --grep "can load via raw JSON override" --project=chromium

      - name: Upload post-deploy test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: post-deploy-test-results
          path: |
            frontend/playwright-report/
            frontend/test-results/

  rollback-on-failure:
    name: Rollback on Critical Failure
    runs-on: ubuntu-latest
    needs: [deploy-pages, post-deploy-tests]
    if: always() && needs.deploy-pages.result == 'success' && needs.post-deploy-tests.result == 'failure' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get previous commit
        id: prev-commit
        run: |
          prev_commit=$(git rev-parse HEAD~1)
          echo "prev_commit=$prev_commit" >> $GITHUB_OUTPUT

      - name: Trigger rollback deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'pages-deploy.yml',
              ref: '${{ steps.prev-commit.outputs.prev_commit }}',
              inputs: {
                reason: 'Rollback due to post-deploy test failure'
              }
            });
            console.log('Rollback deployment triggered for commit ${{ steps.prev-commit.outputs.prev_commit }}');

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Automatic rollback triggered - Post-deploy tests failed',
              body: `## Rollback Summary
              
              **Failed Deployment:** ${{ github.sha }}
              **Rolled back to:** ${{ steps.prev-commit.outputs.prev_commit }}
              **Trigger:** Post-deploy verification tests failed
              **Time:** ${new Date().toISOString()}
              
              **Action Required:**
              1. Review the post-deploy test results in the failed workflow
              2. Fix the issues locally and test thoroughly
              3. Create a new commit with the fixes
              
              **Links:**
              - [Failed workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [Post-deploy test artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `,
              labels: ['bug', 'deployment', 'rollback']
            });
