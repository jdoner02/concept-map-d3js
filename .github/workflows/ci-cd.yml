name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    name: Backend Tests (Java 17 + Spring Boot)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Validate concept-map.json integrity
        run: |
          python3 _Test_Guardian_Homebase/TOOLING/validate_concept_map_nodes.py src/main/resources/concept-map.json --check-orphans

      - name: Run backend tests
        run: ./mvnw clean test

      - name: Generate test coverage report
        run: ./mvnw jacoco:report

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./target/site/jacoco/jacoco.xml
          flags: backend
          name: backend-coverage

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: target/surefire-reports/

  frontend-tests:
    name: Frontend Tests (Node.js + React + Playwright)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17 (required for backend during E2E)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend for production
        working-directory: ./frontend
        run: npm run build

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Run E2E tests (Playwright starts servers)
        working-directory: ./frontend
        env:
          VITE_API_URL: http://127.0.0.1:8080
        run: npm run test:e2e

      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/

      - name: Upload Playwright traces and videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-traces-videos
          path: |
            frontend/test-results/**/trace.zip
            frontend/test-results/**/video.webm

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  integration-tests:
    name: Full-Stack Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Start backend server
        run: |
          ./mvnw spring-boot:run &
          echo $! > backend.pid

      - name: Install jq (JSON CLI)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Wait for backend health check
        run: |
          healthy=0
          for i in {1..30}; do
            if curl -f http://localhost:8080/api/concept-map > /dev/null 2>&1; then
              echo "Backend is healthy"
              healthy=1
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          if [ "$healthy" -ne 1 ]; then
            echo "Backend failed to become healthy in time" >&2
            exit 1
          fi

      - name: Validate API response structure
        run: |
          response=$(curl -s http://localhost:8080/api/concept-map)
          echo "$response" | jq -e '.metadata.total_nodes | numbers' > /dev/null
          echo "$response" | jq -e '.nodes | length | numbers' > /dev/null
          echo "$response" | jq -e '.links | length | numbers' > /dev/null
          echo "API response structure is valid"

      - name: Stop backend server
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
            rm -f backend.pid
          fi

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build for GitHub Pages
        working-directory: ./frontend
        env:
          # Raw JSON URL used by the frontend at build time when running on GitHub Pages
          VITE_JSON_URL: ${{ vars.VITE_JSON_URL }}
        run: |
          npm run build
          # Ensure GitHub Pages serves assets without Jekyll processing
          touch dist/.nojekyll
          # echo "your-domain.com" > dist/CNAME  # Custom domain

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  quality-scan:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests and generate coverage
        run: ./mvnw clean verify
