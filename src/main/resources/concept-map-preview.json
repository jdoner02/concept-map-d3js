{
  "metadata": {
    "version": "10.0-granular-atomic-skills",
    "created": "2025-08-17T12:00:00Z",
    "last_updated": "2025-08-17T16:45:00Z",
    "description": "EWU-wide concept map using explosive recursive decomposition from official course catalog to atomic concepts. Complete decomposition of all 200-level CS courses (CSCD 202, 210, 211, 240, 260) with atomic domains and granular atomic skills. CSCD 211 OOP Principles now includes level 9 granular atomic skills for detailed assessment. All content sourced from official EWU catalog.ewu.edu to ensure academic rigor.",
  "total_nodes": 49,
  "total_links": 47,
    "data_sources": ["catalog.ewu.edu", "www.ewu.edu/cstem", "www.ewu.edu/degrees"],
    "accuracy_verification": "All institutional information cross-referenced with official EWU sources",
    "completion_status": "200-level CS course atomic decomposition: COMPLETE, Level 9 granular skills: PARTIAL (CSCD 211 OOP complete)"
  },
  "nodes": [
    {
      "id": "ewu-root",
      "name": "EWU Official Course Catalog",
      "description": "Eastern Washington University's comprehensive academic catalog containing all officially offered courses across four colleges. Serves as the foundational source for degree requirements, course sequences, and academic standards for undergraduate and graduate programs.",
      "group": "university-root",
      "level": 0,
      "size": 25
    },
    {
      "id": "ewu-cahss",
      "name": "College of Arts, Humanities & Social Sciences (CAHSS)",
      "description": "Academic college encompassing humanities, social sciences, and arts disciplines. Provides foundational liberal arts education and specialized programs in literature, history, psychology, and creative arts.",
      "group": "college",
      "level": 1,
      "size": 15
    },
    {
      "id": "ewu-chsph",
      "name": "College of Health Science & Public Health (CHSPH)",
      "description": "Professional college focused on health sciences, public health, and medical education. Offers programs in nursing, health informatics, and community health with emphasis on evidence-based practice.",
      "group": "college",
      "level": 1,
      "size": 15
    },
    {
      "id": "ewu-cpp",
      "name": "College of Professional Programs (CPP)",
      "description": "Career-focused college offering professional education in business, education, and applied fields. Emphasizes practical skills development and industry partnerships for career preparation.",
      "group": "college",
      "level": 1,
      "size": 15
    },
    {
      "id": "ewu-cstem",
      "name": "College of Science, Technology, Engineering & Mathematics (CSTEM)",
      "description": "The College of Science, Technology, Engineering, & Mathematics prepares students to succeed in fields such as Biology, Chemistry, Computer Programming, Data Science, Geoscience, Web Design, and Computational Mathematics. Faculty actively engage in research providing students opportunities to participate in real-world projects.",
      "group": "college",
      "level": 1,
      "size": 20
    },
    {
      "id": "cstem-biology",
      "name": "Biology",
      "description": "Department offering undergraduate and graduate programs in biological sciences, including pre-medical preparation, environmental biology, biotechnology, and human systems biology. Provides research opportunities from molecular to ecosystem levels.",
      "group": "department",
      "level": 2,
      "size": 12
    },
    {
  "id": "cstem-chemistry-biochemistry",
  "name": "Chemistry, Biochemistry, & Physics Department",
  "description": "Department offering programs in chemistry, biochemistry, and physics with strong laboratory experiences and quantitative problem solving across the physical sciences.",
      "group": "department",
      "level": 2,
      "size": 12
    },
    {
      "id": "cstem-csee",
      "name": "Computer Science & Electrical Engineering",
  "description": "Department offering programs in computer science, electrical engineering, cybersecurity, and related technologies, with emphasis on hands-on learning.",
      "group": "department",
      "level": 2,
      "size": 18
    },
    
    {
      "id": "cstem-design",
      "name": "Design",
  "description": "Department focused on visual communication design, animation, user experience, and interactive media with emphasis on industry-relevant digital design skills.",
      "group": "department",
      "level": 2,
      "size": 12
    },
    {
      "id": "cstem-geosciences",
  "name": "Geosciences Department",
      "description": "Earth and environmental sciences department offering programs in geology, geography, environmental science, and GIS. Emphasizes field-based learning and research in natural resource management and climate studies.",
      "group": "department",
      "level": 2,
      "size": 12
    },
    {
      "id": "cstem-mathematics",
  "name": "Mathematics Department",
  "description": "Mathematical sciences department providing pure and applied mathematics programs, including secondary education preparation. Supports quantitative literacy across STEM disciplines and offers graduate study opportunities.",
      "group": "department",
      "level": 2,
      "size": 12
    },
    {
      "id": "cstem-mechanical-engineering",
  "name": "Mechanical Engineering & Technology Department",
      "description": "Engineering and technology department offering mechanical engineering, manufacturing technology, construction management, and applied technology programs. Combines theoretical engineering with hands-on technical training.",
      "group": "department",
      "level": 2,
      "size": 12
    },
    {
      "id": "csee-undergraduate",
      "name": "Undergraduate Programs",
      "description": "Bachelor's degree programs in computer science and electrical engineering. Provides foundational education for entry-level technical careers and preparation for graduate studies.",
      "group": "degree-level",
      "level": 3,
      "size": 16
    },
    {
      "id": "csee-graduate",
      "name": "Graduate Programs",
      "description": "Master's and doctoral programs offering advanced study in computer science and electrical engineering. Emphasizes research, specialization, and professional development.",
      "group": "degree-level",
      "level": 3,
      "size": 14
    },
    {
      "id": "csee-minor",
      "name": "Minor Programs",
      "description": "Supplementary programs allowing students to gain basic competency in computer science or electrical engineering while pursuing other majors.",
      "group": "degree-level",
      "level": 3,
      "size": 12
    },
    {
      "id": "undergrad-bs-ece",
      "name": "BS–Electrical and Computer Engineering",
      "description": "Bachelor of Science in Electrical & Computer Engineering - integrated ABET-accredited program covering electrical engineering fundamentals and computer engineering applications. Offered in Spokane with comprehensive laboratory experiences and industry partnerships.",
      "group": "degree-program",
      "level": 4,
      "size": 14
    },
    {
      "id": "undergrad-bcs-cs",
      "name": "BCS–Computer Science",
      "description": "Bachelor of Computer Science - specialized computing degree offered in Spokane emphasizing practical programming skills, software development methodologies, and computing applications across disciplines. Designed for students seeking comprehensive technical competency.",
      "group": "degree-program", 
      "level": 4,
      "size": 14
    },
    {
      "id": "undergrad-bs-cs",
      "name": "BS–Computer Science",
      "description": "Bachelor of Science in Computer Science - comprehensive computing program offered in Spokane providing rigorous foundation in algorithms, data structures, software engineering, and theoretical computer science. Features advancement programming exam requirement and extensive laboratory components.",
      "group": "degree-program",
      "level": 4,
      "size": 16
    },
    {
      "id": "undergrad-bs-cs-cyber",
      "name": "BS–Computer Science Cyber Operations",
      "description": "Bachelor of Science in Computer Science Cyber Operations - specialized cybersecurity program offered in Spokane combining traditional computer science foundations with advanced cyber operations, digital forensics, and information security methodologies.",
      "group": "degree-program",
      "level": 4,
      "size": 14
    },
    {
      "id": "undergrad-bs-cyber",
      "name": "BS–Cyber Operations",
      "description": "Bachelor of Science in Cyber Operations - dedicated cybersecurity degree offered in Spokane emphasizing threat analysis, cyber defense strategies, incident response, and security operations. Designed for careers in information security and cyber defense operations.",
      "group": "degree-program",
      "level": 4,
      "size": 14
    },
    {
      "id": "bs-cs-required-cs-courses",
      "name": "Required Computer Science Courses", 
      "description": "Core computer science curriculum providing foundational knowledge in programming, data structures, algorithms, and software engineering. Represents the essential technical content for CS degree completion.",
      "group": "course-category",
      "level": 5,
      "size": 15
    },
    {
      "id": "cs-courses-200-level",
      "name": "200 Level Computer Science Courses",
      "description": "Intermediate computer science courses building upon programming fundamentals. Introduces object-oriented programming, system programming, and computer architecture concepts essential for advanced coursework.",
      "group": "course-level",
      "level": 6,
      "size": 14
    },
    {
      "id": "cscd-202",
      "name": "CSCD 202: Computing Ethics",
      "description": "Exploration of computing technologies from socio-cultural and ethical perspectives, examining impacts on individuals, organizations, and society. Essential for developing responsible computing practices and understanding technology's broader implications.",
      "official-course-code": "CSCD 202",
      "course-title": "Computing Ethics",
      "credits": 4,
      "required-prerequisites": ["ENGL 101"],
      "recommended-corequisites": [],
      "requirement-type": ["MAJOR", "BACR"],
      "official-catalog-description": "This course explores the uses of computing technologies from a socio-cultural and ethical perspective, including the impacts of information systems on individuals, organization, and society and future direction in which the forces of technology and computing are tending to move us.",
      "group": "course",
      "level": 7,
      "size": 12
    },
    {
      "id": "cscd-210", 
      "name": "CSCD 210: Programming Principles I",
      "description": "Foundational programming course covering information representation, algorithms, and program design. Establishes systematic approach to problem-solving through programming and introduces essential software development practices.",
      "official-course-code": "CSCD 210",
      "course-title": "Programming Principles I", 
      "credits": 5,
      "required-prerequisites": ["MATH 114", "CSCD 110"],
      "recommended-corequisites": ["MATH 141"],
      "requirement-type": ["MAJOR"],
      "official-catalog-description": "This course covers the concepts and practices of information representation, computer algorithms, hardware organization and computer program design and implementation. Students write, run, debug, analyze and evaluate computer programs. Topics include primitive data types, number systems, file I/O classes, control structures, method design and usage, array–sorting and searching algorithms. Programming projects are required.",
      "group": "course",
      "level": 7,
      "size": 14
    },
    {
      "id": "cscd-211",
      "name": "CSCD 211: Programming Principles II",
      "description": "Programming Principles II continues coverage of concepts introduced in Programming Principles I. Topics include composition, recursion, data abstraction, polymorphism, inheritance, interfaces, inner classes, abstract classes, object cloning, array lists, linked lists, and exception handling. Programming projects are required. Prerequisites: CSCD 210 with grade ≥C+, MATH 141 with grade ≥C. Concurrent registration in MATH 142 highly recommended.",
      "official-course-code": "CSCD 211",
      "course-title": "Programming Principles II",
      "credits": 5,
      "required-prerequisites": ["CSCD 210", "MATH 141"],
      "recommended-corequisites": ["MATH 142"],
      "requirement-type": ["MAJOR"],
      "official-catalog-description": "This course continues coverage of concepts introduced in Programming Principles I. Topics include composition, recursion, data abstraction, polymorphism, inheritance, interfaces, inner classes, abstract classes, object cloning, array lists, linked lists, and exception handling. Programming projects are required.",
      "group": "course",
      "level": 7,
      "size": 16
    },
    {
      "id": "cscd-240",
      "name": "CSCD 240: C and Unix Programming",
      "description": "System programming using C language and Unix environment. Covers development tools, file systems, system calls, and low-level programming concepts. Bridges high-level programming with system-level understanding.",
      "official-course-code": "CSCD 240",
      "course-title": "C and Unix Programming",
      "credits": 5,
      "required-prerequisites": ["CSCD 210"],
      "recommended-corequisites": [],
      "requirement-type": ["MAJOR"],
      "official-catalog-description": "This course includes program development tools of the UNIX operating system and syntax and programming techniques of the C language in that environment. UNIX topics include interactive shells, common text editors, utility programs, file system structure, libraries and operating system calls and system programming. C topics include data types, structures, pointers and pointer arithmetic, arrays, linked lists, and function design and use. Programming projects are required.",
      "group": "course",
      "level": 7,
      "size": 14
    },
    {
      "id": "cscd-260",
      "name": "CSCD 260/260L: Architecture and Organization",
      "description": "Computer architecture fundamentals including digital circuits, number systems, and microprocessor programming. Combined lecture and laboratory experience providing hands-on understanding of computer systems at the hardware level.",
      "official-course-code": "CSCD 260/260L",
      "course-title": "Architecture and Organization + Lab",
      "credits": 4,
      "required-prerequisites": ["CSCD 240", "EENG 160"],
      "recommended-corequisites": [],
      "requirement-type": ["MAJOR"],
      "official-catalog-description": "Covers fundamentals of digital computer design and microcomputer systems. Topics include number systems, Boolean algebra, basic digital circuits, and an instruction set for a microprocessor. Homework assignments will include use of current software for the design, analysis, and simulation of digital circuits, assembly language programming emphasizing I/O device access and features that support high level languages. Programming projects are required.",
      "group": "course",
      "level": 7,
      "size": 12
    },
    {
      "id": "cscd211-oop-principles",
      "name": "Object-Oriented Design Principles",
      "description": "Object-oriented programming fundamentals including data abstraction, polymorphism, and inheritance as covered in Programming Principles II. Students master the transition from procedural to object-oriented paradigms through systematic application of encapsulation, abstraction principles, and polymorphic behavior implementation.",
      "atomic_concepts": ["data abstraction", "polymorphism", "inheritance", "encapsulation", "object-oriented design", "class hierarchies"],
      "pedagogical_purpose": "Transition students from procedural thinking to object-oriented design methodology",
      "career_relevance": "Foundation for enterprise software development, design patterns, and software architecture",
      "group": "cscd211-domain",
      "level": 8,
      "size": 14
    },
    {
      "id": "cscd211-data-structures",
      "name": "Data Structures and Collections",
      "description": "Implementation and usage of fundamental data structures including array lists and linked lists. Students learn to select appropriate data structures for specific problems and understand how data organization affects program efficiency and design decisions.",
      "atomic_concepts": ["array lists", "linked lists", "data organization", "collection interfaces", "structure selection"],
      "pedagogical_purpose": "Develop understanding of how data organization impacts program design and performance",
      "career_relevance": "Essential for algorithm implementation, system design, and performance optimization",
      "group": "cscd211-domain", 
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd211-advanced-techniques",
      "name": "Advanced Programming Techniques",
      "description": "Sophisticated programming approaches including recursion, composition, object cloning, and exception handling. These techniques enable elegant solutions to complex problems and robust error management in software systems.",
      "atomic_concepts": ["recursion", "composition", "object cloning", "exception handling", "problem decomposition"],
      "pedagogical_purpose": "Expand problem-solving toolkit with advanced computational approaches",
      "career_relevance": "Critical for complex algorithm implementation and robust software development",
      "group": "cscd211-domain",
      "level": 8, 
      "size": 12
    },
    {
      "id": "cscd211-interfaces-contracts",
      "name": "Interface and Contract Design",
      "description": "Design and implementation of interfaces, abstract classes, and inner classes to create flexible software architectures. Students learn to define contracts between software components and implement polymorphic behavior through well-designed interfaces.",
      "atomic_concepts": ["interfaces", "abstract classes", "inner classes", "contract definition", "polymorphic design"],
      "pedagogical_purpose": "Understand how to design flexible, extensible software architectures",
      "career_relevance": "Essential for API design, framework development, and large-scale software systems",
      "group": "cscd211-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd202-ethical-frameworks",
      "name": "Ethical Frameworks in Computing",
      "description": "Fundamental ethical theories and frameworks applied to computing contexts. Students explore deontological, consequentialist, and virtue ethics approaches to analyze moral dimensions of technology decisions, professional codes of conduct, and responsibility in computing practice.",
      "atomic_concepts": ["ethical theories", "moral reasoning", "professional ethics codes", "responsibility frameworks", "value-sensitive design"],
      "pedagogical_purpose": "Establish theoretical foundation for ethical analysis of computing technologies and professional practice",
      "career_relevance": "Essential for ethical decision-making in software development, data management, and technology leadership roles",
      "group": "cscd202-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd202-technology-impact",
      "name": "Technology Impact Analysis",
      "description": "Systematic examination of how information systems affect individuals, organizations, and society. Students learn to identify, analyze, and evaluate both positive and negative consequences of computing technologies across multiple scales and contexts.",
      "atomic_concepts": ["individual impacts", "organizational impacts", "societal impacts", "unintended consequences", "impact assessment methods"],
      "pedagogical_purpose": "Develop analytical skills for comprehensive evaluation of technology effects across multiple stakeholder groups",
      "career_relevance": "Critical for product managers, system designers, and technology policy professionals",
      "group": "cscd202-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd202-sociocultural-perspectives",
      "name": "Socio-Cultural Perspectives on Technology",
      "description": "Exploration of how cultural, social, and economic factors shape technology development and adoption. Addresses digital divide, accessibility, inclusion, privacy, and cultural values in computing system design and deployment.",
      "atomic_concepts": ["digital divide", "accessibility", "cultural values", "social inclusion", "privacy concerns", "economic factors"],
      "pedagogical_purpose": "Broaden understanding of technology as a socially embedded practice with diverse cultural implications",
      "career_relevance": "Important for user experience design, international development, and inclusive technology creation",
      "group": "cscd202-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd202-future-implications",
      "name": "Future Technology Implications",
      "description": "Analysis of emerging technologies and their potential societal trajectories. Students examine current technology trends, predict future developments, and consider proactive approaches to responsible innovation and technology governance.",
      "atomic_concepts": ["emerging technologies", "technology forecasting", "responsible innovation", "technology governance", "future scenarios"],
      "pedagogical_purpose": "Develop forward-thinking perspective on technology development and long-term consequence consideration",
      "career_relevance": "Valuable for technology strategy, research and development, and policy work in emerging technology fields",
      "group": "cscd202-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd240-unix-environment",
      "name": "Unix Operating System Environment",
      "description": "Comprehensive introduction to Unix/Linux system fundamentals including interactive shells, text editors, utility programs, and file system structure. Students master essential Unix tools and understand how operating systems provide development environments.",
      "atomic_concepts": ["interactive shells", "text editors", "utility programs", "file system structure", "command-line interface", "Unix philosophy"],
      "pedagogical_purpose": "Establish proficiency with Unix development environment and system interaction paradigms",
      "career_relevance": "Essential for system administration, DevOps, server development, and most professional software development environments",
      "group": "cscd240-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd240-system-programming",
      "name": "System Programming and OS Interface",
      "description": "Low-level programming using operating system calls, libraries, and system programming techniques. Students learn to interact directly with the operating system kernel and understand the interface between applications and system resources.",
      "atomic_concepts": ["operating system calls", "system libraries", "system programming", "process management", "I/O operations", "kernel interface"],
      "pedagogical_purpose": "Bridge high-level programming with system-level understanding of how software interacts with hardware",
      "career_relevance": "Critical for systems programming, embedded development, performance optimization, and infrastructure software",
      "group": "cscd240-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd240-c-language-fundamentals",
      "name": "C Language Programming Fundamentals",
      "description": "Core C programming language concepts including data types, structures, function design and use. Emphasizes C-specific programming patterns and low-level programming techniques essential for system-level software development.",
      "atomic_concepts": ["C data types", "structures", "function design", "function usage", "C programming patterns", "low-level programming"],
      "pedagogical_purpose": "Master foundational C programming skills and understand procedural programming paradigms",
      "career_relevance": "Foundation for systems programming, embedded development, operating systems, and performance-critical applications",
      "group": "cscd240-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd240-memory-data-structures",
      "name": "Memory Management and Data Structures",
      "description": "Advanced memory concepts including pointers, pointer arithmetic, arrays, and linked list implementation in C. Students learn manual memory management and understand how data structures are implemented at the system level.",
      "atomic_concepts": ["pointers", "pointer arithmetic", "arrays", "linked lists", "memory management", "data structure implementation"],
      "pedagogical_purpose": "Develop deep understanding of memory models and manual memory management essential for system programming",
      "career_relevance": "Essential for embedded systems, game development, high-performance computing, and systems-level software",
      "group": "cscd240-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd260-digital-foundations",
      "name": "Digital Systems Foundations",
      "description": "Fundamental concepts of digital computer design including number systems, Boolean algebra, and basic digital circuits. Students learn the mathematical and logical foundations underlying all digital computing systems.",
      "atomic_concepts": ["number systems", "Boolean algebra", "digital circuits", "binary arithmetic", "logic gates", "digital design principles"],
      "pedagogical_purpose": "Establish mathematical and logical foundations for understanding how computers represent and process information",
      "career_relevance": "Essential for computer engineering, embedded systems design, and understanding computer architecture fundamentals",
      "group": "cscd260-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd260-microprocessor-architecture",
      "name": "Microprocessor Architecture and Instruction Sets",
      "description": "Computer architecture concepts focusing on microprocessor design and instruction set architecture. Students understand how processors execute instructions and interface with memory and I/O systems.",
      "atomic_concepts": ["microprocessor design", "instruction set architecture", "CPU organization", "instruction execution", "processor-memory interface", "architectural models"],
      "pedagogical_purpose": "Develop understanding of how processors execute programs and manage system resources",
      "career_relevance": "Important for embedded systems, computer architecture, and high-performance computing applications",
      "group": "cscd260-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd260-assembly-programming",
      "name": "Assembly Language Programming",
      "description": "Low-level programming using assembly language with emphasis on I/O device access and features supporting high-level languages. Students learn direct processor programming and hardware interface techniques.",
      "atomic_concepts": ["assembly language", "I/O device access", "hardware interface", "low-level programming", "processor instructions", "system calls"],
      "pedagogical_purpose": "Provide hands-on experience with direct processor programming and hardware interaction",
      "career_relevance": "Critical for embedded programming, system software development, and performance optimization",
      "group": "cscd260-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "cscd260-circuit-simulation",
      "name": "Digital Circuit Design and Simulation",
      "description": "Practical experience with digital circuit design, analysis, and simulation using current software tools. Students learn to model, analyze, and validate digital systems through computer-aided design methodologies.",
      "atomic_concepts": ["circuit design", "circuit analysis", "simulation software", "design validation", "computer-aided design", "digital modeling"],
      "pedagogical_purpose": "Develop practical skills in digital system design and validation using industry-standard tools",
      "career_relevance": "Essential for digital design, FPGA development, and hardware engineering roles",
      "group": "cscd260-domain",
      "level": 8,
      "size": 12
    },
    {
      "id": "oop-data-abstraction-techniques",
      "name": "Data Abstraction Techniques",
      "description": "Fundamental techniques for creating abstract data types that hide implementation details while exposing essential operations. Students learn to design classes that encapsulate data and provide controlled access through well-defined interfaces.",
      "atomic_skills": ["abstract data type design", "encapsulation implementation", "information hiding principles", "interface specification", "data member protection", "accessor method design"],
      "assessment_objectives": ["Design abstract data types with appropriate encapsulation", "Implement information hiding in class design", "Create controlled access interfaces"],
      "prerequisite_skills": ["basic class definition", "method implementation", "variable scope understanding"],
      "group": "cscd211-atomic-skill",
      "level": 9,
      "size": 8
    },
    {
      "id": "oop-polymorphic-behavior",
      "name": "Polymorphic Behavior Implementation", 
      "description": "Implementation of polymorphic behavior through method overriding and dynamic binding. Students master runtime polymorphism to create flexible, extensible software systems that can work with objects of different types uniformly.",
      "atomic_skills": ["method overriding techniques", "dynamic binding understanding", "runtime polymorphism implementation", "virtual method usage", "polymorphic collections", "type-safe casting"],
      "assessment_objectives": ["Implement method overriding correctly", "Demonstrate understanding of dynamic binding", "Create polymorphic object collections"],
      "prerequisite_skills": ["inheritance concepts", "method definition", "object instantiation"],
      "group": "cscd211-atomic-skill", 
      "level": 9,
      "size": 8
    },
    {
      "id": "oop-inheritance-hierarchies",
      "name": "Inheritance Hierarchies",
      "description": "Design and implementation of class inheritance hierarchies including super/subclass relationships, inheritance types, and method inheritance. Students learn to create logical class hierarchies that promote code reuse and maintainability.",
      "atomic_skills": ["class hierarchy design", "super/subclass relationships", "inheritance types understanding", "method inheritance mechanisms", "constructor chaining", "inheritance vs composition decisions"],
      "assessment_objectives": ["Design logical inheritance hierarchies", "Implement proper super/subclass relationships", "Apply appropriate inheritance patterns"],
      "prerequisite_skills": ["class design", "method implementation", "object relationships"],
      "group": "cscd211-atomic-skill",
      "level": 9, 
      "size": 8
    },
    {
      "id": "oop-encapsulation-mechanisms",
      "name": "Encapsulation Mechanisms",
      "description": "Implementation of encapsulation through access modifiers, getter/setter methods, and class boundaries. Students master the practical application of encapsulation principles to create well-structured, maintainable object-oriented code.",
      "atomic_skills": ["access modifier usage", "getter/setter implementation", "class boundary definition", "private member protection", "public interface design", "package-level access control"],
      "assessment_objectives": ["Apply access modifiers appropriately", "Implement proper getter/setter methods", "Design clean public interfaces"],
      "prerequisite_skills": ["class structure understanding", "method definition", "variable scope"],
      "group": "cscd211-atomic-skill",
      "level": 9,
      "size": 8
    }
  ],
  "links": [
    {"source": "ewu-root", "target": "ewu-cahss", "type": "contains"},
    {"source": "ewu-root", "target": "ewu-chsph", "type": "contains"},
    {"source": "ewu-root", "target": "ewu-cpp", "type": "contains"},
    {"source": "ewu-root", "target": "ewu-cstem", "type": "contains"},
    
    {"source": "ewu-cstem", "target": "cstem-biology", "type": "contains"},
    {"source": "ewu-cstem", "target": "cstem-chemistry-biochemistry", "type": "contains"},
    {"source": "ewu-cstem", "target": "cstem-csee", "type": "contains"},
    {"source": "ewu-cstem", "target": "cstem-design", "type": "contains"},
    {"source": "ewu-cstem", "target": "cstem-geosciences", "type": "contains"},
    {"source": "ewu-cstem", "target": "cstem-mathematics", "type": "contains"},
    {"source": "ewu-cstem", "target": "cstem-mechanical-engineering", "type": "contains"},
    
    {"source": "cstem-csee", "target": "csee-undergraduate", "type": "contains"},
    {"source": "cstem-csee", "target": "csee-graduate", "type": "contains"},
    {"source": "cstem-csee", "target": "csee-minor", "type": "contains"},
    
    {"source": "csee-undergraduate", "target": "undergrad-bs-ece", "type": "contains"},
    {"source": "csee-undergraduate", "target": "undergrad-bcs-cs", "type": "contains"},
    {"source": "csee-undergraduate", "target": "undergrad-bs-cs", "type": "contains"},
    {"source": "csee-undergraduate", "target": "undergrad-bs-cs-cyber", "type": "contains"},
    {"source": "csee-undergraduate", "target": "undergrad-bs-cyber", "type": "contains"},
    
    {"source": "undergrad-bs-cs", "target": "bs-cs-required-cs-courses", "type": "contains"},
    
    {"source": "bs-cs-required-cs-courses", "target": "cs-courses-200-level", "type": "contains"},
    
    {"source": "cs-courses-200-level", "target": "cscd-202", "type": "contains"},
    {"source": "cs-courses-200-level", "target": "cscd-210", "type": "contains"},
    {"source": "cs-courses-200-level", "target": "cscd-211", "type": "contains"},
    {"source": "cs-courses-200-level", "target": "cscd-240", "type": "contains"},
    {"source": "cs-courses-200-level", "target": "cscd-260", "type": "contains"},
    
    {"source": "cscd-211", "target": "cscd211-oop-principles", "type": "decomposes_into"},
    {"source": "cscd-211", "target": "cscd211-data-structures", "type": "decomposes_into"},
    {"source": "cscd-211", "target": "cscd211-advanced-techniques", "type": "decomposes_into"},
    {"source": "cscd-211", "target": "cscd211-interfaces-contracts", "type": "decomposes_into"},
    
    {"source": "cscd211-oop-principles", "target": "oop-data-abstraction-techniques", "type": "decomposes_into"},
    {"source": "cscd211-oop-principles", "target": "oop-polymorphic-behavior", "type": "decomposes_into"},
    {"source": "cscd211-oop-principles", "target": "oop-inheritance-hierarchies", "type": "decomposes_into"},
    {"source": "cscd211-oop-principles", "target": "oop-encapsulation-mechanisms", "type": "decomposes_into"},
    
    {"source": "cscd-202", "target": "cscd202-ethical-frameworks", "type": "decomposes_into"},
    {"source": "cscd-202", "target": "cscd202-technology-impact", "type": "decomposes_into"},
    {"source": "cscd-202", "target": "cscd202-sociocultural-perspectives", "type": "decomposes_into"},
    {"source": "cscd-202", "target": "cscd202-future-implications", "type": "decomposes_into"},
    
    {"source": "cscd-240", "target": "cscd240-unix-environment", "type": "decomposes_into"},
    {"source": "cscd-240", "target": "cscd240-system-programming", "type": "decomposes_into"},
    {"source": "cscd-240", "target": "cscd240-c-language-fundamentals", "type": "decomposes_into"},
    {"source": "cscd-240", "target": "cscd240-memory-data-structures", "type": "decomposes_into"},
    
    {"source": "cscd-260", "target": "cscd260-digital-foundations", "type": "decomposes_into"},
    {"source": "cscd-260", "target": "cscd260-microprocessor-architecture", "type": "decomposes_into"},
    {"source": "cscd-260", "target": "cscd260-assembly-programming", "type": "decomposes_into"},
    {"source": "cscd-260", "target": "cscd260-circuit-simulation", "type": "decomposes_into"}
  ]
}
